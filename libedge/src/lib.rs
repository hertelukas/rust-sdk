#![no_std]

//! This library defines common interface between the host and enclave
//! application libraries.
//
// SPDX-License-Identifier: MIT
// Copyright (C) 2022 VTT Technical Research Centre of Finland Ltd

extern crate core;

/// Common status codes
#[derive(Copy, Clone, PartialEq, Eq)]
pub enum Status {
    /* Keystone status codes: */
    /// Operation succeeded
    Success       =  0,
    /// Invalid call identifier
    BadCallID     =  1,
    /// Bad memory offset
    BadOffset     =  2,
    /// Bad memory address
    BadPointer    =  3,
    /// Generic error
    Error         =  4,
    /// System call failed
    SyscallFailed =  5,
    /* Non-keystone status codes: */
    ///  Provided buffer was too short
    ShortBuffer   =  6,
    /// Enclave was interrupted
    Interrupted   =  7,
    /// No pedding operation to handle
    NoPending     =  8,
    /// Internal runtime error
    InternalError =  9,
    /// Operation ended (in success)
    ///
    /// Status 'Done' is used only in ecall-handlers to signal that the handler
    /// should stop after completing this call. The status value sent to the
    /// host application is 'Success'.
    Done          = 10,
    /// Unknown status (error)
    Unknown       = 11,
}

impl Status {
    pub fn from_u32(value: u32) -> Status {
        match value {
            0  => Status::Success,
            1  => Status::BadCallID,
            2  => Status::BadOffset,
            3  => Status::BadPointer,
            4  => Status::Error,
            5  => Status::SyscallFailed,
            /* Non-keystone status codes: */
            6  => Status::ShortBuffer,
            7  => Status::Interrupted,
            8  => Status::NoPending,
            9  => Status::InternalError,
            10 => Status::Done,
            _  => Status::Unknown,
        }
    }

    pub fn from_usize(value: usize) -> Status {
        return Self::from_u32(value as u32);
    }

    pub fn as_u32(value: Status) -> u32 {
        return value as u32;
    }
}

/// Common error codes
pub enum Error {
    /// No error
    Success        = 0x0000,
    /// Access denied
    AccessDeniend  = 0xFF01,
    /// Provided argument was invalid
    BadArgument    = 0xFF02,
    /// Provided data is not in correct format
    BadFormat      = 0xFF03,
    /// Operation attempted in invalid state
    BadState       = 0xFF04,
    /// Error generated by enclave pseudo-device
    Device         = 0xFF05,
    /// Error performing edge call
    EdgeCall       = 0xFF06,
    /// Internal error
    InternalError  = 0xFF07,
    /// Enclave interrupted
    Interrupted    = 0xFF08,
    /// Resource not found
    NotFound       = 0xFF09,
    /// Feature not implemented
    NotImplemented = 0xFF0A,
    /// Operation not supported
    NotSupported   = 0xFF0B,
    /// Ran out of memory
    OutOfMemory    = 0xFF0C,
    /// Waiting for an operation to complete
    Pending        = 0xFF0D,
    /// Fatal error
    Panic          = 0xFF0E,
    /// Error generated by the security monitor
    SecurityMonitor = 0xFF0F,
    /// Unknown error
    Unknown        = 0xFF10,
}

impl Error {
    pub fn from_usize(value: usize) -> Error {
        match value {
            0x0000 => Error::Success,
            0xFF01 => Error::AccessDeniend,
            0xFF02 => Error::BadArgument,
            0xFF03 => Error::BadFormat,
            0xFF04 => Error::BadState,
            0xFF05 => Error::Device,
            0xFF06 => Error::EdgeCall,
            0xFF07 => Error::InternalError,
            0xFF08 => Error::Interrupted,
            0xFF09 => Error::NotFound,
            0xFF0A => Error::NotImplemented,
            0xFF0B => Error::NotSupported,
            0xFF0C => Error::OutOfMemory,
            0xFF0D => Error::Pending,
            0xFF0E => Error::Panic,
            0xFF0F => Error::SecurityMonitor,
            0xFF10 => Error::Unknown,
            _      => Error::Unknown
        }
    }

    pub fn as_usize(value: Error) -> usize {
        return value as usize;
    }
}

#[cfg(feature = "debug_memory")]
pub mod alloc;

pub mod attestation;
pub mod ecall;
pub mod ocall;
